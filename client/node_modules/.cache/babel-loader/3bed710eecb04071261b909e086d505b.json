{"ast":null,"code":"import { ActionType } from \"../actions/actions\";\nexport let LoadingState;\n\n(function (LoadingState) {\n  LoadingState[LoadingState[\"IDLE\"] = 0] = \"IDLE\";\n  LoadingState[LoadingState[\"LOADING\"] = 1] = \"LOADING\";\n  LoadingState[LoadingState[\"DONE\"] = 2] = \"DONE\";\n})(LoadingState || (LoadingState = {}));\n\nconst initialState = {\n  loading: LoadingState.IDLE,\n  movieSearchResult: {}\n};\nexport const otherReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.FETCH_BEGIN:\n      return { ...state,\n        loading: LoadingState.LOADING\n      };\n\n    case ActionType.FETCH_END:\n      return { ...state,\n        movieSearchResult: action.payload,\n        loading: LoadingState.DONE\n      };\n\n    default:\n      return state;\n  }\n};\nexport default otherReducer;","map":{"version":3,"sources":["/home/eric/javascript-tmp-files/test-express/CAO/src/reducers/otherReducer.tsx"],"names":["ActionType","LoadingState","initialState","loading","IDLE","movieSearchResult","otherReducer","state","action","type","FETCH_BEGIN","LOADING","FETCH_END","payload","DONE"],"mappings":"AAAA,SAAiBA,UAAjB,QAAmC,oBAAnC;AAEA,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;GAAAA,Y,KAAAA,Y;;AAWZ,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,OAAO,EAAEF,YAAY,CAACG,IADW;AAEjCC,EAAAA,iBAAiB,EAAE;AAFc,CAAnC;AAKA,OAAO,MAAMC,YAAY,GAAG,CAC1BC,KAAK,GAAGL,YADkB,EAE1BM,MAF0B,KAGT;AACjB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,UAAU,CAACU,WAAhB;AACE,aAAO,EACL,GAAGH,KADE;AAELJ,QAAAA,OAAO,EAAEF,YAAY,CAACU;AAFjB,OAAP;;AAIF,SAAKX,UAAU,CAACY,SAAhB;AACE,aAAO,EACL,GAAGL,KADE;AAELF,QAAAA,iBAAiB,EAAEG,MAAM,CAACK,OAFrB;AAGLV,QAAAA,OAAO,EAAEF,YAAY,CAACa;AAHjB,OAAP;;AAKF;AACE,aAAOP,KAAP;AAbJ;AAeD,CAnBM;AAqBP,eAAeD,YAAf","sourcesContent":["import { Action, ActionType } from \"../actions/actions\";\n\nexport enum LoadingState {\n  IDLE,\n  LOADING,\n  DONE,\n}\n\nexport interface InitialState {\n  loading: LoadingState;\n  movieSearchResult: {};\n}\n\nconst initialState: InitialState = {\n  loading: LoadingState.IDLE,\n  movieSearchResult: {},\n};\n\nexport const otherReducer = (\n  state = initialState,\n  action: Action\n): InitialState => {\n  switch (action.type) {\n    case ActionType.FETCH_BEGIN:\n      return {\n        ...state,\n        loading: LoadingState.LOADING,\n      };\n    case ActionType.FETCH_END:\n      return {\n        ...state,\n        movieSearchResult: action.payload,\n        loading: LoadingState.DONE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default otherReducer;\n"]},"metadata":{},"sourceType":"module"}